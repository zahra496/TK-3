import java.util.*;

public class InfixConverterArray {
    private static int precedence(char op) {
        return (op == '+' || op == '-') ? 1 : 2;
    }

    public static String toPostfix(String expr) {
        String[] tokens = expr.trim().split("\\s+");
        Stack<String> stack = new Stack<>();
        StringBuilder output = new StringBuilder();

        for (String token : tokens) {
            if (token.matches("\\d+")) {
                output.append(token);
            } else {
                while (!stack.isEmpty() && precedence(token.charAt(0)) <= precedence(stack.peek().charAt(0))) {
                    output.append(stack.pop());
                }
                stack.push(token);
            }
        }
        while (!stack.isEmpty()) {
            output.append(stack.pop());
        }
        return output.toString();
    }

    public static String toPrefix(String expr) {
        String[] tokens = expr.trim().split("\\s+");
        List<String> reversed = new ArrayList<>(Arrays.asList(tokens));
        Collections.reverse(reversed);

        for (int i = 0; i < reversed.size(); i++) {
            String token = reversed.get(i);
            if (token.equals("(")) reversed.set(i, ")");
            else if (token.equals(")")) reversed.set(i, "(");
        }

        String postfix = toPostfix(String.join(" ", reversed));
        List<String> result = new ArrayList<>();
        for (char ch : postfix.toCharArray()) result.add(String.valueOf(ch));
        Collections.reverse(result);
        return String.join("", result);
    }
}
